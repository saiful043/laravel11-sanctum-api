<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreRoleRequest;
use App\Models\Role;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;
// use Illuminate\Routing\Controller;

class RolesController extends Controller
{

    // public function __construct()
    // {
    //     // Apply the auth:sanctum middleware to all methods in this controller
    //     $this->middleware('auth:sanctum');
    // }
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {   
        $query = $request->get('search_text');

        // if (!$query) {
        //     return redirect()->back()->with('error', 'Please enter a search term');
        // }

        // Specify your table name
        $table = 'roles';  // Replace with your actual table name

        // Get the list of columns for the table
        $columns = Schema::getColumnListing($table);
        
        // Initialize the query builder for the table
        $results = DB::table($table)
        ->orderBy('id', 'desc');

        // Add `orWhere` clauses to search all columns
        foreach ($columns as $column) {
            // echo  $query ; exit;
            $results = $results->orWhere($column, 'LIKE', '%' . $query . '%');
            
            
        }
       
       
        $perPage = $request->get('per_page');
        // $roles = Role::paginate($perPage);
        $roles = $results->paginate($perPage);
        return response()->json($roles);
    }

    /**
     * Show the form for creating a new resource.
     */
   

    /**
     * Store a newly created resource in storage.
     */
    // public function store(Request $request)
    // {
    //     $fields = $request->validate([
    //         'name' => 'required|unique:roles,name',
    //         'description' => 'nullable|string'
    //     ]);

    //     // $post = Post::create($fields);
    //     $role = Role::create($fields);
    //     return response()->json(['role' => $role], 201);
    //     // return ['role' => $role];
    // }


    public function store(StoreRoleRequest $request)
    {
        $alias = $this->sanitizeName($request->get('name'));
        $validateData = $request->validated();
       
        // $post = Post::create($fields);
        $role = Role::create([
            'name' => $validateData['name'],
            'description' => $validateData['description'],
            'alias' => $alias, // Alias generated by backend
        ]);
        return response()->json(['role' => $role], 201);
        // return ['role' => $role];
    }

    function sanitizeName($name) {
        // Convert to lowercase and replace all spaces with underscores
        return strtolower(preg_replace('/\s+/', '_', $name));
    }

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $role = Role::findOrFail($id);
        return response()->json($role);
    }


    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        $role = Role::findOrFail($id);

        $validatedData = $request->validate([
            'name' => 'required|string|unique:roles,name,' . $role->id,
            'description' => 'nullable|string',
        ]);

        $alias = $this->sanitizeName($validatedData['name']);

        $role->update([
            'name' => $validatedData['name'],
            'description' => $validatedData['description'],
            'alias' => $alias, // Alias updated by backend
        ]);

        return response()->json(['role' => $role]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $role = Role::findOrFail($id);
        $role->delete();
        return ['message' => 'The Role has been deleted'];
        // return response()->json(null, 204);
    }
}
